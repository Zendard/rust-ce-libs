extern "C" {
    fn os_ThrowError(error: u8);
    fn os_PushErrorHandler() -> isize;
    fn os_PopErrorHandler();
}

const ERROR_NUMBER_START: u8 = 1 << 7;
#[repr(u8)]
pub enum Error {
    EDIT = ERROR_NUMBER_START,
    MASK = 0x7F,
    OVERFLOW = 1 + ERROR_NUMBER_START,
    DIVBY0 = 2 + ERROR_NUMBER_START,
    SINGULARMAT = 3 + ERROR_NUMBER_START,
    DOMAIN = 4 + ERROR_NUMBER_START,
    INCREMENT = 5 + ERROR_NUMBER_START,
    BREAK = 6 + ERROR_NUMBER_START,
    NONREAL = 7 + ERROR_NUMBER_START,
    SYNTAX = 8 + ERROR_NUMBER_START,
    DATATYPE = 9 + ERROR_NUMBER_START,
    ARGUMENT = 10 + ERROR_NUMBER_START,
    DIMMISMATCH = 11 + ERROR_NUMBER_START,
    DIMENSION = 12 + ERROR_NUMBER_START,
    UNDEFINED = 13 + ERROR_NUMBER_START,
    MEMORY = 14 + ERROR_NUMBER_START,
    INVALID = 15 + ERROR_NUMBER_START,
    ILLEGALNEST = 16 + ERROR_NUMBER_START,
    BOUND = 17 + ERROR_NUMBER_START,
    GRAPHRANGE = 18 + ERROR_NUMBER_START,
    ZOOM = 19 + ERROR_NUMBER_START,
    LABEL = 20,
    STAT = 21,
    SOLVER = 22 + ERROR_NUMBER_START,
    SINGULARITY = 23 + ERROR_NUMBER_START,
    SIGNCHANGE = 24 + ERROR_NUMBER_START,
    ITERATIONS = 25 + ERROR_NUMBER_START,
    BADGUESS = 26 + ERROR_NUMBER_START,
    STATPLOT = 27,
    TOLTOOSMALL = 28 + ERROR_NUMBER_START,
    RESERVED = 29 + ERROR_NUMBER_START,
    MODE = 30 + ERROR_NUMBER_START,
    LNKERR = 31 + ERROR_NUMBER_START,
    LNKMEMERR = 32 + ERROR_NUMBER_START,
    LNKTRANSERR = 33 + ERROR_NUMBER_START,
    LNKDUPERR = 34 + ERROR_NUMBER_START,
    LNKMEMFULL = 35 + ERROR_NUMBER_START,
    UNKNOWN = 36 + ERROR_NUMBER_START,
    SCALE = 37 + ERROR_NUMBER_START,
    IDNOTFOUND = 38,
    NOMODE = 39 + ERROR_NUMBER_START,
    VALIDATION = 40,
    LENGTH = 41 + ERROR_NUMBER_START,
    APPLICATION = 42 + ERROR_NUMBER_START,
    APPERR1 = 43 + ERROR_NUMBER_START,
    APPERR2 = 44 + ERROR_NUMBER_START,
    EXPIREDAPP = 45,
    BADADD = 46,
    ARCHIVED = 47 + ERROR_NUMBER_START,
    VERSION = 48,
    ARCHFULL = 49,
    VARIABLE = 50 + ERROR_NUMBER_START,
    DUPLICATE = 51 + ERROR_NUMBER_START,
}

pub fn throw_error(error: Error) {
    unsafe {
        os_ThrowError(error as u8);
    }
}
